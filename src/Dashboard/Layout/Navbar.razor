@{
    var options = Options.Value;
}
<nav class="navbar navbar-expand-lg fixed-top navbar-dark bg-primary">
    <div class="container-fluid">
        <a href="/" class="navbar-brand">
            @options.BrandName
            @foreach (var iconClasses in options.BrandIcons)
            {
                <span class="@(iconClasses) d-none d-lg-inline" aria-hidden="true"></span>
            }
        </a>
        <button class="navbar-toggler"
                type="button"
                data-bs-toggle="collapse"
                data-bs-target="#site-navbar"
                aria-controls="site-navbar"
                aria-expanded="false"
                aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse">
            <ul class="navbar-nav me-auto">
                <li class="nav-item">
                    <a class="nav-link" href="https://blog.martincostello.com/" rel="noopener" target="_blank" title="My blog">
                        Blog
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="https://martincostello.com/home/about/" rel="noopener" target="_blank" title="About me">
                        About
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link"
                       href="@(_repositoryUrl)"
                       rel="noopener"
                       target="_blank"
                       title="@(options.GitHubInstance)">
                        @(options.GitHubInstance)
                        <Icon Name="@(Icons.GitHub)" />
                    </a>
                </li>
            </ul>
            @if (_isAuthenticated)
            {
                <ul class="nav navbar-nav">
                    <span class="navbar-text"
                          id="user-name"
                          title="@(options.GitHubInstance) user"
                          data-bs-toggle="tooltip"
                          data-bs-title="Signed in as @(_user?.Login) (@(_user?.Name))">
                        @(_user?.Login)
                    </span>
                    <li>
                        <button class="btn btn-link navbar-btn nav-link"
                                title="Sign out"
                                type="button"
                                data-bs-toggle="tooltip"
                                data-bs-title="Removes your @(options.GitHubInstance) access token from local storage"
                                @onclick="SignOutAsync">
                            Sign out
                            <Icon Name="@(Icons.RightFromBracket)" />
                        </button>
                    </li>
                </ul>
            }
            else if (!options.IsGitHubEnterprise)
            {
                <ul class="nav navbar-nav">
                    <li>
                        <button class="btn btn-link navbar-btn nav-link"
                                title="Sign in"
                                type="button"
                                data-bs-toggle="tooltip"
                                data-bs-title="Configure a @(options.GitHubInstance) access token"
                                @onclick="SignIn">
                            Sign in
                            <Icon Name="@(Icons.RightToBracket)" />
                        </button>
                    </li>
                </ul>
            }
        </div>
    </div>
</nav>

@code {
    private bool _isAuthenticated;
    private string? _repositoryUrl;
    private GitHubUser? _user;

    protected override void OnInitialized()
    {
        var options = Options.Value;

        var uriBuilder = new UriBuilder(options.GitHubServerUrl)
        {
            Path = $"{options.RepositoryOwner}/{options.RepositoryName}",
        };

        _repositoryUrl = uriBuilder.Uri.ToString();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        _isAuthenticated = GitHubService.IsAuthenticated;

        if (_isAuthenticated)
        {
            try
            {
                _user = await GitHubClient.GetUserAsync();
            }
            catch (HttpRequestException ex) when (ex.StatusCode is System.Net.HttpStatusCode.Unauthorized)
            {
                // TODO Clear local storage
                _isAuthenticated = false;
            }
        }
    }

    private void SignIn()
    {
        Navigation.NavigateTo("/token");
    }

    private async Task SignOutAsync()
    {
        _isAuthenticated = false;
        await GitHubService.StoreTokenAsync(string.Empty);
        Navigation.NavigateTo("/");
    }
}
